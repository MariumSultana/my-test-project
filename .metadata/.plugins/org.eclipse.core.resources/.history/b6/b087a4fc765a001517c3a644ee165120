import java.io.File;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.IOException;

import org.apache.poi.hssf.usermodel.HSSFCell;
import org.apache.poi.hssf.usermodel.HSSFRow;
import org.apache.poi.hssf.usermodel.HSSFSheet;
import org.apache.poi.hssf.usermodel.HSSFWorkbook;
import org.junit.Test;
import org.openqa.selenium.By;
import org.openqa.selenium.WebDriver;
import org.openqa.selenium.firefox.FirefoxDriver;


public class KDFDriversheet {
	WebDriver dr;
// this driver code will read through the excel sheet.
	
	@Test
	public void myDriver() throws IOException, NumberFormatException, InterruptedException{
		String[][] xTC, xTS;//are 2Darry to hold the excel data..test cases and test steps
		String xlPath;//where is the XL file located
		int tcRows, tsRows;// get row count for each sheet
		String vxpath, vKW, Vdata, vactual, vexpected, vresult;
		
		//1. Read the TestCases and TestSteps sheet from the excel into 0D array's.
		xlPath = "/Users/Maisha/Documents/DDF/KDF.xls";
		xTC = readxl(xlPath, "KDF Plan");
		xTS = readxl(xlPath, "Test Case steps");
		//get the number of rows and columns for each excel sheet that we read into 2D array's.
		tcRows=xTC.length;
		tsRows=xTS.length;
		System.out.println("total test case row are: "+tcRows);
		System.out.println("total test step row are: "+tsRows);
		
		for(int i = 1; i<tcRows; i++){
			//2. It will go through each row in the Test Case sheet and check if it is ready for execution.
			if (xTC[i][3].equals("Y")){
			System.out.println("Executing test case ID "+xTC[i][0]);
			//3. If yes, then it will go through each row in the test step sheet to see a matching TCID.
			for(int j=1; j<tsRows; j++){
				if (xTC[i][0].equals(xTS[j][0])){
				System.out.println("Executing test step ID " +xTS[j][0]);
				vKW = xTS[j][4];
				vxpath= xTS[j][5];
				Vdata= xTS[j][6];
				vactual=xTS[j][7];
				vexpected=xTS[j][8];
				vresult=xTS[j][9];
				
				System.out.println("the KW is " +vKW);
				System.out.println("the vxpath is " +vxpath);
				System.out.println("the Vdata is " +Vdata);
				//AUT will start to get interacted with
		if(vKW.equals("browserGetURL")){
					browserGetURL(Vdata);
				}
				if(vKW.equals("browserClose")){
					browserClose();
					}
				if(vKW.equals("textType")){
					textType(vxpath, Vdata);
				}
				if(vKW.equals("buttonClick")){
					buttonClick(vxpath);
				}
				if(vKW.equals("getText")){
					vactual= getText(vxpath);
					if(vexpected.equals(vactual)){
						xTS[j][7]=vexpected;
						xTS[j][9]="Pass";
						System.out.println("actual reult "+vactual);
						System.out.println("vexpected reult "+vexpected);
						System.out.println("vresult reult "+xTS[j][9]);
						
					}else{
						xTS[j][9]="Fail";
						System.out.println("vresult reult "+xTS[j][9]);
					}
					
				}
				if(vKW.equals("waitFor")){
					waitFor(Integer.parseInt(Vdata));
				}//end of interaction with App
			}
			}
			}
		}
		
		
		
		
		
		
		
	}
	
	public String[][] readxl(String fPath, String fSheet) throws IOException{
		String[][] readData;
		int x_row, x_col;
		File myReadFile = new File(fPath);
		FileInputStream myStream = new FileInputStream(myReadFile);
		HSSFWorkbook myWB = new HSSFWorkbook(myStream);
		HSSFSheet myWS = myWB.getSheet(fSheet);
		x_row = myWS.getLastRowNum()+1;
		x_col = myWS.getRow(0).getLastCellNum();
		System.out.println("count row "+x_row);
		System.out.println("count cell "+x_col);
		readData = new String[x_row][x_col];
		for(int i=0; i<x_row; i++){
			HSSFRow row = myWS.getRow(i);
			for(int j=0; j<x_col; j++){
				HSSFCell cell = row.getCell(j);
				String value = "-";
				if(cell!=null){
					value = cellToString(cell);
				}
				readData[i][j] = value;
				//System.out.println("value"+ value);
				 try{
						System.out.println("test  READ get value"+ readData[i][j]);
						}catch (ArrayIndexOutOfBoundsException s){
							System.out.println("arran index out of bound exc"+ s);
						}
			}
			
		}
		myStream.close();
		return readData ;
	}
	public String cellToString(HSSFCell cell) {
		Object result;
		int type = cell.getCellType();
		switch (type){
		case HSSFCell.CELL_TYPE_NUMERIC:
			result = cell.getNumericCellValue();
			break;
		case HSSFCell.CELL_TYPE_STRING:
			result = cell.getStringCellValue();
			break;
		case HSSFCell.CELL_TYPE_BOOLEAN:
			result = cell.getBooleanCellValue();
			break;
		case HSSFCell.CELL_TYPE_FORMULA:
			throw new RuntimeException("can't convert");
		case HSSFCell.CELL_TYPE_BLANK:
			result = "%";
			break;
		case HSSFCell.CELL_TYPE_ERROR:
			throw new RuntimeException("can't convert");
			default:
				throw new RuntimeException("can't convert");
		}
		return result.toString();
	}
	public void writexl(String fpath, String fsheet, String[][] fwritexl) throws IOException{
		int row, col;
		File writefile = new File(fpath);
		HSSFWorkbook myWB = new HSSFWorkbook();
		HSSFSheet myWS = myWB.createSheet(fsheet);
		row = fwritexl.length;
		col = fwritexl[0].length;
		
		for(int rows=0; rows<row; rows++){
			HSSFRow x_row = myWS.createRow(rows);
			for(int cols=0; cols<col; cols++){
				HSSFCell x_cell = x_row.createCell(cols);
				x_cell.setCellType(HSSFCell.CELL_TYPE_STRING);
				x_cell.setCellValue(fwritexl[rows][cols]);
				
				FileOutputStream  myStream = new FileOutputStream(writefile);
				myWB.write(myStream);
				myStream.flush();
				myStream.close();
			}
		}
		
	}

	//independent keyword function-Reusable
	public void browserGetURL(String fURL){
		//purpose: open a browser session and navigate a specific url				
		//input: URL		
		//output:
		dr = new FirefoxDriver();
		dr.get(fURL);
	}
	public void browserClose(){
		//purpose: Close an open browser session 
		//input:
		//output:
		dr.quit();
	}
	public void textType(String fXPath, String fText){
		//purpose: find an element and type a text web edit field
		//input:xpath, text to type
		//output:
		dr.findElement(By.xpath(fXPath)).clear();
		dr.findElement(By.xpath(fXPath)).sendKeys(fText);
	}
	public void buttonClick(String fXPath){
		//purpose: Clicks on a button
		//input:xpath to identify that specific button
		//output:
		dr.findElement(By.xpath(fXPath)).click();
		
	}
	public void waitFor(int i ) throws InterruptedException{
		Thread.sleep(i);
	}
	public String getText(String fXPath){
		//purpose: get text from a page
		//input:xpath to identify that specific button
		//output:return text
		String fresut;
		fresut= dr.findElement(By.xpath(fXPath)).getText();
		return fresut;
	}
	
}
